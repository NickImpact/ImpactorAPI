/*
 * This file is part of Impactor, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2018-2022 NickImpact
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

package net.impactdev.impactor.api.plugin;

import net.impactdev.impactor.api.logging.PluginLogger;
import net.impactdev.impactor.api.platform.plugins.PluginMetadata;

/**
 * Represents a plugin which will be loaded and initialized by Impactor. Due to the nature
 * of mod loading, the Impactor API may not be available during certain lifecycle events
 * for a subset or all plugins/mods. This is due to the parallel mod loading schema which
 * doesn't necessarily maintain dependency load order.
 *
 * <p>For Impactor to acknowledge an inheriting plugin, you will want to register your plugin
 * with the {@link PluginRegistry} via {@link PluginRegistry#register(PluginMetadata, ImpactorPlugin)}.
 * From there, Impactor will post load calls to your plugins, ensuring vital Impactor API
 * components are made available for its plugins.
 */
public interface ImpactorPlugin {

	/**
	 * Specifies a set of metadata describing the plugin. This data contains information such
	 * as its actual ID, the display name, its current version, as well as a description of
	 * its purpose.
	 *
	 * @return Metadata describing the plugin
	 */
	PluginMetadata metadata();

	/**
	 * Specifies a logger the plugin should use when logging output generated by said plugin. These
	 * loggers come with 5 levels of output, which can be used as necessary by a plugin to pipe output
	 * to the correct control location.
	 *
	 * @return A {@link PluginLogger} to be used by this plugin
	 */
	PluginLogger logger();

	/**
	 * Fired during mod/plugin construction. This event is effectively an extension
	 * of your plugin's constructor, and should be focused only around that.
	 *
	 * <p>This event  is also typically where you'd want to register any event subscriptions.
	 * For instance, the SuggestEconomyServiceEvent within the economy API module should be
	 * subscribed to during this phase, as it will select its implementation during {@link #setup()}.
	 */
	void construct();

	/**
	 * Fired during the server setup phase, before the server has been officially starting.
	 */
	void setup();

	/**
	 * Fired during the server setup phase, right as the server has begun starting.
	 */
	void starting();

	/**
	 * Fired during the server setup phase, right as the server has finished starting.
	 */
	void started();

	/**
	 * Fired when the server has begun its shutdown phase. This should be used to
	 * clean up any resources which might need to be saved or otherwise managed
	 * to cleanly shut down a plugin.
	 */
	void shutdown();

}
